{"version":3,"sources":["components/Logo.tsx","components/NavBar.tsx","components/Background.tsx","screens/Home.tsx","screens/About.tsx","screens/Skill.tsx","screens/Experience.tsx","screens/Project.tsx","screens/Contact.tsx","routes/index.ts","App.js","serviceWorker.js","index.js"],"names":["Logo","bgColor","textColor","className","style","backgroundColor","color","to","NavBar","tabs","map","path","name","key","Background","primaryColor","secondaryColor","reversed","background","clsx","Home","history","About","props","Skill","Experience","Project","Contact","routes","screens","Object","keys","screenName","assign","toLowerCase","filter","App","reverse","Screen","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gkBAiBeA,G,YARF,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,UACpB,OACI,yBAAKC,UAAU,OAAOC,MAAO,CAACC,gBAAiBJ,EAASK,MAAOJ,IAC3D,kBAAC,IAAD,CAAMK,GAAG,KAAT,aCaGC,EAhBA,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,KACb,OACI,yBAAKN,UAAU,oBACX,kBAAC,EAAD,CAAMF,QAAS,QAASC,UAAW,YACnC,yBAAKC,UAAU,iBACf,yBAAKA,UAAU,eAEXM,EAAKC,KAAI,gBAAEC,EAAF,EAAEA,KAAMC,EAAR,EAAQA,KAAR,OACL,kBAAC,IAAD,CAAML,GAAII,EAAME,IAAKF,GAAOC,S,wBCEjCE,EATI,SAAC,GAAqD,IAApDC,EAAmD,EAAnDA,aAAcC,EAAqC,EAArCA,eAAgBC,EAAqB,EAArBA,SAC/C,OACA,yBAAKd,UAAU,+CAA+CC,MAAO,CAACc,WAAYH,IAC9E,yBAAKZ,UAAWgB,YAAK,qDAAsD,CAACF,aAAYb,MAAO,CAACc,WAAYF,KAC5G,yBAAKb,UAAWgB,YAAK,oDAAqD,CAACF,aAAYb,MAAO,CAACc,WAAYF,OCCpGI,EARF,SAAC,GAAqB,EAApBC,QACX,OACI,6BACI,kBAAC,EAAD,CAAYN,aAAa,UAAUC,eAAe,YCK/CM,EARD,SAACC,GACX,OACI,6BACI,kBAAC,EAAD,CAAYR,aAAa,UAAUC,eAAe,QAAQC,UAAQ,MCK/DO,EARD,SAACD,GACX,OACI,6BACI,kBAAC,EAAD,CAAYR,aAAa,QAAQC,eAAe,cCK7CS,EARI,SAACF,GAChB,OACI,6BACI,kBAAC,EAAD,CAAYR,aAAa,UAAUC,eAAe,QAAQC,UAAQ,MCK/DS,EARC,SAACH,GACb,OACI,6BACI,kBAAC,EAAD,CAAYR,aAAa,UAAUC,eAAe,QAAQC,UAAQ,MCK/DU,EARC,SAACJ,GACb,OACI,6BACI,kBAAC,EAAD,CAAYR,aAAa,UAAUC,eAAe,QAAQC,UAAQ,MCRxEW,EAAS,CAAC,IAAKC,GAErBC,OAAOC,KAAKF,GAASnB,KAAI,SAACsB,GAAD,OACrBF,OAAOG,OAAOL,EAAdE,OAAA,IAAAA,CAAA,GAAwB,IAAME,EAAWE,cAAiBL,EAAgBG,QAG/DJ,QCGTnB,G,MAAOqB,OAAOC,KAAKF,GACrBM,QAAO,SAAAH,GAAU,MAAoB,SAAfA,KACtBtB,KAAI,SAAAsB,GAAU,MAAK,CACnBrB,KAAM,KAAOqB,EAAWE,cACxBtB,KAAMoB,OA2BKI,MAxBf,WACC,OACC,kBAAC,IAAD,KACA,yBAAKjC,UAAU,OACd,kBAAC,EAAD,CAAQM,KAAMA,IACd,kBAAC,IAAD,KAEEqB,OAAOC,KAAKH,GACXS,UACA3B,KAAI,SAAAC,GACJ,IAAM2B,EAASV,EAAOjB,GACtB,OACC,kBAAC,IAAD,CAAOA,KAAMA,EAAME,IAAKF,IACtB,SAAAY,GAAK,OAAI,kBAACe,EAAWf,aCnBVgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.df9c50ed.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Logo.css'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport interface Props {\r\n    bgColor: string;\r\n    textColor: string;\r\n}\r\n\r\nconst Logo = ({bgColor, textColor}: Props) => {\r\n    return (\r\n        <div className='logo' style={{backgroundColor: bgColor, color: textColor}}>\r\n            <Link to='/'>REX M0</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logo","import React from 'react'\r\nimport './NavBar.css'\r\nimport Logo from './Logo'\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport interface Props {\r\n    tabs: {name: string, path: string}[];\r\n}\r\n\r\nconst NavBar = ({tabs}: Props) => {\r\n    return (\r\n        <div className='navbar-container'>\r\n            <Logo bgColor={'black'} textColor={'#FFAA00'}/>\r\n            <div className='navbar-space'/>\r\n            <div className='navbar-tabs'>\r\n            {\r\n                tabs.map(({path, name}) => (\r\n                    <Link to={path} key={path}>{name}</Link>\r\n                ))\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar","import React from 'react'\r\nimport './Background.css'\r\nimport clsx from 'clsx'\r\n\r\nexport interface Props {\r\n    primaryColor: string;\r\n    secondaryColor: string;\r\n    reversed?: boolean;\r\n}\r\n\r\nconst Background = ({primaryColor, secondaryColor, reversed}: Props) => {\r\n    return (\r\n    <div className='Background animate__animated animate__fadeIn' style={{background: primaryColor}}>\r\n        <div className={clsx('bottom-eclipse animate__animated animate__fadeInUp', {reversed})} style={{background: secondaryColor}}></div>\r\n        <div className={clsx('top-eclipse animate__animated animate__fadeInDown', {reversed})} style={{background: secondaryColor}}></div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Background","import React from 'react'\r\nimport Background from '../components/Background'\r\n\r\nexport interface Props{\r\n    history: any;\r\n}\r\n\r\nconst Home = ({history}: Props) => {\r\n    return (\r\n        <div>\r\n            <Background primaryColor='#FFAA00' secondaryColor='white'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react'\r\nimport Background from '../components/Background'\r\n\r\nexport interface Props{\r\n\r\n}\r\n\r\nconst About = (props: Props) => {\r\n    return (\r\n        <div>\r\n            <Background primaryColor='#FFAEAE' secondaryColor='white' reversed/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About","import React from 'react'\r\nimport Background from '../components/Background'\r\n\r\nexport interface Props{\r\n\r\n}\r\n\r\nconst Skill = (props: Props) => {\r\n    return (\r\n        <div>\r\n            <Background primaryColor='white' secondaryColor='#0022FF'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Skill","import React from 'react'\r\nimport Background from '../components/Background'\r\n\r\nexport interface Props{\r\n\r\n}\r\n\r\nconst Experience = (props: Props) => {\r\n    return (\r\n        <div>\r\n            <Background primaryColor='#FFAEAE' secondaryColor='white' reversed/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Experience","import React from 'react'\r\nimport Background from '../components/Background'\r\n\r\nexport interface Props{\r\n\r\n}\r\n\r\nconst Project = (props: Props) => {\r\n    return (\r\n        <div>\r\n            <Background primaryColor='#FFAEAE' secondaryColor='white' reversed/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Project","import React from 'react'\r\nimport Background from '../components/Background'\r\n\r\nexport interface Props{\r\n\r\n}\r\n\r\nconst Contact = (props: Props) => {\r\n    return (\r\n        <div>\r\n            <Background primaryColor='#FFAEAE' secondaryColor='white' reversed/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact","import * as screens from '../screens'\r\n\r\nconst routes = {'/': screens.Home}\r\n\r\nObject.keys(screens).map((screenName: string) => \r\n    Object.assign(routes, {['/' + screenName.toLowerCase()]: (screens as any)[screenName]})\r\n)\r\n\r\nexport default routes","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\"\nimport NavBar from './components/NavBar'\nimport routes from './routes'\nimport * as screens from './screens'\nimport './App.css'\n\nconst tabs = Object.keys(screens)\n\t\t\t.filter(screenName => (screenName !== 'Home'))\n\t\t\t.map(screenName => ({\n\t\t\t\tpath: './' + screenName.toLowerCase(),\n\t\t\t\tname: screenName\n\t\t\t}))\n\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t<div className=\"App\">\n\t\t\t<NavBar tabs={tabs}/>\n\t\t\t<Switch>\n\t\t\t\t{\n\t\t\t\t\tObject.keys(routes)\n\t\t\t\t\t.reverse()\n\t\t\t\t\t.map(path => {\n\t\t\t\t\t\tconst Screen = routes[path]\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Route path={path} key={path}>\n\t\t\t\t\t\t\t\t{props => <Screen {...props}/>}\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</Switch>\n\t\t</div>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}