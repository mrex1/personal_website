{"version":3,"sources":["constants/screenName.constant.ts","utils/namePathTranslation.ts","components/Logo.tsx","constants/color.constant.ts","components/NavBar.tsx","components/Background.tsx","screens/Home.tsx","screens/About.tsx","screens/Skill.tsx","screens/Experience.tsx","screens/Project.tsx","screens/Contact.tsx","screens/index.ts","routes/index.ts","App.js","serviceWorker.js","index.js"],"names":["ScreenName","nameToPath","name","pathToName","path","replace","Logo","bgColor","textColor","className","style","backgroundColor","color","to","home","colors","primary","secondary","textPrimary","textSecondary","inactive","logoBack","logoText","about","skill","experience","project","contact","NavBar","tabs","useState","hover","setHover","curScreenName","useLocation","pathname","hoverHandler","useCallback","hoverEndHandler","map","key","onMouseOver","onMouseLeave","Background","reversed","background","clsx","Home","history","About","props","Skill","Experience","Project","Contact","screens","routes","Object","values","screenName","assign","keys","filter","App","reverse","Screen","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7cba2414.chunk.js","sourcesContent":["export enum ScreenName {\r\n    home = '',\r\n    about = 'about',\r\n    skill = 'skill',\r\n    experience = 'experience',\r\n    project = 'project',\r\n    contact = 'contact'\r\n}","import {ScreenName} from '../constants/screenName.constant'\r\n\r\nexport function nameToPath (name: ScreenName): string {\r\n    return '/personal_website/' + name\r\n}\r\n\r\nexport function pathToName (path: string): ScreenName {\r\n    const name = path.replace(/\\/personal_website/, '')\r\n                .replace('/', '')\r\n    return name as ScreenName\r\n}","import React from 'react'\r\nimport './Logo.css'\r\nimport {Link} from 'react-router-dom'\r\nimport {nameToPath} from '../utils/namePathTranslation'\r\nimport {ScreenName} from '../constants/screenName.constant'\r\n\r\nexport interface Props {\r\n    bgColor: string;\r\n    textColor: string;\r\n}\r\n\r\nconst Logo = ({bgColor, textColor}: Props) => {\r\n    return (\r\n        <div className='logo' style={{backgroundColor: bgColor, color: textColor}}>\r\n            <Link to={nameToPath(ScreenName.home)}>REX M0</Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Logo","import {ScreenName} from './screenName.constant'\r\n\r\nexport interface Color {\r\n    primary: string;\r\n    secondary: string;\r\n    textPrimary: string;\r\n    textSecondary: string;\r\n    inactive: string;\r\n    logoBack: string;\r\n    logoText: string;\r\n}\r\n\r\nexport type ColorForScreen = {\r\n    [key in ScreenName]: Color\r\n}\r\n\r\nexport const colors: ColorForScreen = {\r\n    [ScreenName.home]: {\r\n        primary: '#FFAA00',\r\n        secondary: 'white',\r\n        textPrimary: 'black',\r\n        textSecondary: '#0022FF',\r\n        inactive: '#A3A3A3',\r\n        logoBack: 'black',\r\n        logoText: '#FFAA00'\r\n    },\r\n    [ScreenName.about]: {\r\n        primary: '#FFAEAE',\r\n        secondary: 'white',\r\n        textPrimary: 'black',\r\n        textSecondary: '#FF0000',\r\n        inactive: '#F1F1F1',\r\n        logoBack: '#FFAEAE',\r\n        logoText: 'white'\r\n    },\r\n    [ScreenName.skill]: {\r\n        primary: 'white',\r\n        secondary: '#0022FF',\r\n        textPrimary: 'black',\r\n        textSecondary: 'white',\r\n        inactive: '#DCDCDC',\r\n        logoBack: '#0022FF',\r\n        logoText: 'white'\r\n    },\r\n    [ScreenName.experience]: {\r\n        primary: '#9FECFF',\r\n        secondary: 'white',\r\n        textPrimary: 'black',\r\n        textSecondary: '#034150',\r\n        inactive: 'white',\r\n        logoBack: '#9FECFF',\r\n        logoText: 'white'\r\n    },\r\n    [ScreenName.project]: {\r\n        primary: '#60026E',\r\n        secondary: 'white',\r\n        textPrimary: 'black',\r\n        textSecondary: '#3acd4a',\r\n        inactive: '#DCDCDC',\r\n        logoBack: 'black',\r\n        logoText: '#60026E'\r\n    },\r\n    [ScreenName.contact]: {\r\n        primary: '#61B48B',\r\n        secondary: 'white',\r\n        textPrimary: 'black',\r\n        textSecondary: '#034150',\r\n        inactive: 'white',\r\n        logoBack: '#61B48B',\r\n        logoText: 'white'\r\n    }\r\n}","import React, {useState, useCallback} from 'react'\r\nimport './NavBar.css'\r\nimport Logo from './Logo'\r\nimport {Link} from 'react-router-dom'\r\nimport { useLocation } from 'react-router-dom'\r\nimport {pathToName, nameToPath} from '../utils/namePathTranslation'\r\nimport {colors} from '../constants/color.constant'\r\nimport {ScreenName} from '../constants/screenName.constant'\r\n\r\nexport interface Props {\r\n    tabs: ScreenName[];\r\n}\r\n\r\nconst NavBar = ({tabs}: Props) => {\r\n    const [hover, setHover] = useState<any>({})\r\n    const {pathname} = useLocation()\r\n    const curScreenName = pathToName(pathname)\r\n\r\n    const hoverHandler = useCallback((name) => () => \r\n        setHover((hover: any) => ({...hover, [name]: true}))\r\n    , [])\r\n\r\n    const hoverEndHandler = useCallback((name) => () => {\r\n        setHover((hover: any) => ({...hover, [name]: false}))\r\n    }, [])\r\n\r\n    const color = colors[curScreenName]\r\n\r\n    return (\r\n        <div className='navbar-container'>\r\n            <Logo bgColor={color.logoBack} textColor={color.logoText}/>\r\n            <div className='navbar-space'/>\r\n            <div className='navbar-tabs'>\r\n            {\r\n                tabs.map((name) => (\r\n                    <Link style={{color: hover[name] === true || curScreenName === name ?\r\n                        color.textSecondary : color.inactive}} to={nameToPath(name)} key={name}\r\n                    onMouseOver={hoverHandler(name)} onMouseLeave={hoverEndHandler(name)}>{name}</Link>\r\n                ))\r\n            }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar","import React from 'react'\r\nimport './Background.css'\r\nimport clsx from 'clsx'\r\nimport { useLocation } from 'react-router-dom'\r\nimport { colors } from '../constants/color.constant'\r\nimport {pathToName} from '../utils/namePathTranslation'\r\n\r\nexport interface Props {\r\n    reversed?: boolean;\r\n}\r\n\r\nconst Background = ({reversed}: Props) => {\r\n    const {pathname} = useLocation()\r\n    const curScreenName = pathToName(pathname)\r\n    const color = colors[curScreenName]\r\n\r\n    return (\r\n    <div className='Background animate__animated animate__fadeIn' style={{background: color.primary}}>\r\n        <div className={clsx('bottom-eclipse animate__animated animate__fadeInUp', {reversed})} style={{background: color.secondary}}></div>\r\n        <div className={clsx('top-eclipse animate__animated animate__fadeInDown', {reversed})} style={{background: color.secondary}}></div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Background","import React from 'react'\r\nimport Background from '../components/Background'\r\n\r\nexport interface Props{\r\n    history: any;\r\n}\r\n\r\nconst Home = ({history}: Props) => {\r\n    return (\r\n        <div>\r\n            <Background/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","import React from 'react'\r\nimport Background from '../components/Background'\r\n\r\nexport interface Props{\r\n\r\n}\r\n\r\nconst About = (props: Props) => {\r\n    return (\r\n        <div>\r\n            <Background reversed/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About","import React from 'react'\r\nimport Background from '../components/Background'\r\n\r\nexport interface Props{\r\n\r\n}\r\n\r\nconst Skill = (props: Props) => {\r\n    return (\r\n        <div>\r\n            <Background/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Skill","import React from 'react'\r\nimport Background from '../components/Background'\r\n\r\nexport interface Props{\r\n\r\n}\r\n\r\nconst Experience = (props: Props) => {\r\n    return (\r\n        <div>\r\n            <Background reversed/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Experience","import React from 'react'\r\nimport Background from '../components/Background'\r\n\r\nexport interface Props{\r\n\r\n}\r\n\r\nconst Project = (props: Props) => {\r\n    return (\r\n        <div>\r\n            <Background/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Project","import React from 'react'\r\nimport Background from '../components/Background'\r\n\r\nexport interface Props{\r\n\r\n}\r\n\r\nconst Contact = (props: Props) => {\r\n    return (\r\n        <div>\r\n            <Background reversed/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contact","import Home from './Home'\r\nimport About from './About'\r\nimport Skill from './Skill'\r\nimport Experience from './Experience'\r\nimport Project from './Project'\r\nimport Contact from './Contact'\r\nimport {ScreenName} from '../constants/screenName.constant'\r\n\r\nconst screens = {\r\n    [ScreenName.home]: Home,\r\n    [ScreenName.about]: About,\r\n    [ScreenName.skill]: Skill,\r\n    [ScreenName.experience]: Experience,\r\n    [ScreenName.project]: Project,\r\n    [ScreenName.contact]: Contact,\r\n}\r\nexport default screens ","import screens from '../screens'\r\nimport {ScreenName} from '../constants/screenName.constant'\r\nimport {nameToPath} from '../utils/namePathTranslation'\r\nconst routes = {}\r\n\r\nObject.values(ScreenName)\r\n.map((screenName) => \r\n    Object.assign(routes, {[nameToPath(screenName)]: screens[screenName]})\r\n)\r\n\r\nexport default routes","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\"\nimport NavBar from './components/NavBar'\nimport routes from './routes'\nimport {ScreenName} from './constants/screenName.constant'\nimport './App.css'\n\nconst tabs = Object.keys(ScreenName)\n\t\t\t.filter(key => (key !== 'home'))\n\t\t\t.map(key => ScreenName[key])\nfunction App() {\n\treturn (\n\t\t<Router>\n\t\t<div className=\"App\">\n\t\t\t<NavBar tabs={tabs}/>\n\t\t\t<Switch>\n\t\t\t\t{\n\t\t\t\t\tObject.keys(routes)\n\t\t\t\t\t.reverse()\n\t\t\t\t\t.map(path => {\n\t\t\t\t\t\tconst Screen = routes[path]\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<Route path={path} key={path}>\n\t\t\t\t\t\t\t\t{props => <Screen {...props}/>}\n\t\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t)\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t</Switch>\n\t\t</div>\n\t\t</Router>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}